# vim: syntax=python tabstop=4 expandtab
# coding: utf-8


def _gatk_multi_arg(flag, files):
    flag += " "
    return " ".join(flag + f for f in files)
#
#def _sample_to_units(pattern):
#    def apply(wildcards):
#       return expand(
#            pattern, reference="/ELS/els9/ex_scratch/users/galaxy/galaxyNT/var/data-manager-data/hg19/bwa_mem_index/hg19/hg19.fa",
#            unit=config["samples"][wildcards.sample])
#    return apply


rule gatk_HaplotypeCaller_ERC_GVCF:
    input:    
        bam="mapped_reads/merged_samples/{sample}.dedup.realn.recal.bam"
    output:
        gvcf="variant_calling/{sample}.g.vcf",
        idx="variant_calling/{sample}.g.vcf.idx"
    params:
        custom=java_params(tmp_dir=config.get("tmp_dir"), fraction_for=4),
        intervals = lambda wildcards: resolve_single_filepath(*references_abs_path(), config.get("intervals").get(config.get("samples_intervals").get(wildcards.sample, config["intervals_default"])).get("bedTarget")),
        genome=resolve_single_filepath(*references_abs_path(), config.get("genome_fasta"))
    log:
        "logs/gatk/HaplotypeCaller/{sample}.genotype_info.log"
    benchmark:
        "benchmarks/gatk/HaplotypeCaller/{sample}.txt"
    threads: 2
    shell:
        "gatk -T HaplotypeCaller -R {params.genome} {params.custom} "
        "-I {input.bam} --emitRefConfidence GVCF "
        "-L {params.intervals} -nct {threads} -ip 200 "
        "-o {output.gvcf} >& {log}"

rule gatk_GenotypeGVCFs:
    input:
        gvcfs=expand("variant_calling/{sample}.g.vcf", sample=config["samples"])
    output:
        "variant_calling/all.vcf"
    params:
        custom=java_params(tmp_dir=config.get("tmp_dir"), fraction_for=1),
        genome=resolve_single_filepath(*references_abs_path(), config.get("genome_fasta")),
        dbsnp=resolve_single_filepath(*references_abs_path(), config.get("known_variants").get("dbsnp")),
    log:
        "variant_calling/log/all.genotype.log"
    benchmark:
        "benchmarks/gatk/HaplotypeCaller/all.txt"
    threads: conservative_cpu_count(max_cores=20)
    run:
        gvcfs = _gatk_multi_arg("--variant", input.gvcfs)
        shell(
            "gatk -T GenotypeGVCFs {gvcfs} -nt {threads} {params.custom} "
            "-R {params.genome} "
            "--dbsnp {params.dbsnp} -o {output} >& {log}")


rule gatk_CombineGVCFs:
    input:
        gvcfs=expand("variant_calling/{sample}.g.vcf", sample=config["samples"])
    output:
        "variant_calling/cohort/cohort.gvcf"
    params:
        custom=java_params(tmp_dir=config.get("tmp_dir"), fraction_for=1),
        genome=resolve_single_filepath(*references_abs_path(), config.get("genome_fasta"))
    log:
        "logs/gatk/CombineGVCFs/cohort.log"
    benchmark:
        "benchmarks/gatk/CombineGVCFs/cohort.txt"
    run:
        gvcfs = _gatk_multi_arg("--variant", input.gvcfs)
        shell(
            "gatk -T CombineGVCFs {gvcfs} {params.custom} "
            "-R {params.genome} "
            "-o {output} >& {log}")

